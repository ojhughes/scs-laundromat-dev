// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type BoshFormService struct {
	GetFormStub        func(path string) (api.Form, error)
	getFormMutex       sync.RWMutex
	getFormArgsForCall []struct {
		path string
	}
	getFormReturns struct {
		result1 api.Form
		result2 error
	}
	getFormReturnsOnCall map[int]struct {
		result1 api.Form
		result2 error
	}
	PostFormStub        func(api.PostFormInput) error
	postFormMutex       sync.RWMutex
	postFormArgsForCall []struct {
		arg1 api.PostFormInput
	}
	postFormReturns struct {
		result1 error
	}
	postFormReturnsOnCall map[int]struct {
		result1 error
	}
	AvailabilityZonesStub        func() (map[string]string, error)
	availabilityZonesMutex       sync.RWMutex
	availabilityZonesArgsForCall []struct{}
	availabilityZonesReturns     struct {
		result1 map[string]string
		result2 error
	}
	availabilityZonesReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	NetworksStub        func() (map[string]string, error)
	networksMutex       sync.RWMutex
	networksArgsForCall []struct{}
	networksReturns     struct {
		result1 map[string]string
		result2 error
	}
	networksReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *BoshFormService) GetForm(path string) (api.Form, error) {
	fake.getFormMutex.Lock()
	ret, specificReturn := fake.getFormReturnsOnCall[len(fake.getFormArgsForCall)]
	fake.getFormArgsForCall = append(fake.getFormArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("GetForm", []interface{}{path})
	fake.getFormMutex.Unlock()
	if fake.GetFormStub != nil {
		return fake.GetFormStub(path)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getFormReturns.result1, fake.getFormReturns.result2
}

func (fake *BoshFormService) GetFormCallCount() int {
	fake.getFormMutex.RLock()
	defer fake.getFormMutex.RUnlock()
	return len(fake.getFormArgsForCall)
}

func (fake *BoshFormService) GetFormArgsForCall(i int) string {
	fake.getFormMutex.RLock()
	defer fake.getFormMutex.RUnlock()
	return fake.getFormArgsForCall[i].path
}

func (fake *BoshFormService) GetFormReturns(result1 api.Form, result2 error) {
	fake.GetFormStub = nil
	fake.getFormReturns = struct {
		result1 api.Form
		result2 error
	}{result1, result2}
}

func (fake *BoshFormService) GetFormReturnsOnCall(i int, result1 api.Form, result2 error) {
	fake.GetFormStub = nil
	if fake.getFormReturnsOnCall == nil {
		fake.getFormReturnsOnCall = make(map[int]struct {
			result1 api.Form
			result2 error
		})
	}
	fake.getFormReturnsOnCall[i] = struct {
		result1 api.Form
		result2 error
	}{result1, result2}
}

func (fake *BoshFormService) PostForm(arg1 api.PostFormInput) error {
	fake.postFormMutex.Lock()
	ret, specificReturn := fake.postFormReturnsOnCall[len(fake.postFormArgsForCall)]
	fake.postFormArgsForCall = append(fake.postFormArgsForCall, struct {
		arg1 api.PostFormInput
	}{arg1})
	fake.recordInvocation("PostForm", []interface{}{arg1})
	fake.postFormMutex.Unlock()
	if fake.PostFormStub != nil {
		return fake.PostFormStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.postFormReturns.result1
}

func (fake *BoshFormService) PostFormCallCount() int {
	fake.postFormMutex.RLock()
	defer fake.postFormMutex.RUnlock()
	return len(fake.postFormArgsForCall)
}

func (fake *BoshFormService) PostFormArgsForCall(i int) api.PostFormInput {
	fake.postFormMutex.RLock()
	defer fake.postFormMutex.RUnlock()
	return fake.postFormArgsForCall[i].arg1
}

func (fake *BoshFormService) PostFormReturns(result1 error) {
	fake.PostFormStub = nil
	fake.postFormReturns = struct {
		result1 error
	}{result1}
}

func (fake *BoshFormService) PostFormReturnsOnCall(i int, result1 error) {
	fake.PostFormStub = nil
	if fake.postFormReturnsOnCall == nil {
		fake.postFormReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.postFormReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *BoshFormService) AvailabilityZones() (map[string]string, error) {
	fake.availabilityZonesMutex.Lock()
	ret, specificReturn := fake.availabilityZonesReturnsOnCall[len(fake.availabilityZonesArgsForCall)]
	fake.availabilityZonesArgsForCall = append(fake.availabilityZonesArgsForCall, struct{}{})
	fake.recordInvocation("AvailabilityZones", []interface{}{})
	fake.availabilityZonesMutex.Unlock()
	if fake.AvailabilityZonesStub != nil {
		return fake.AvailabilityZonesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.availabilityZonesReturns.result1, fake.availabilityZonesReturns.result2
}

func (fake *BoshFormService) AvailabilityZonesCallCount() int {
	fake.availabilityZonesMutex.RLock()
	defer fake.availabilityZonesMutex.RUnlock()
	return len(fake.availabilityZonesArgsForCall)
}

func (fake *BoshFormService) AvailabilityZonesReturns(result1 map[string]string, result2 error) {
	fake.AvailabilityZonesStub = nil
	fake.availabilityZonesReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *BoshFormService) AvailabilityZonesReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.AvailabilityZonesStub = nil
	if fake.availabilityZonesReturnsOnCall == nil {
		fake.availabilityZonesReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.availabilityZonesReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *BoshFormService) Networks() (map[string]string, error) {
	fake.networksMutex.Lock()
	ret, specificReturn := fake.networksReturnsOnCall[len(fake.networksArgsForCall)]
	fake.networksArgsForCall = append(fake.networksArgsForCall, struct{}{})
	fake.recordInvocation("Networks", []interface{}{})
	fake.networksMutex.Unlock()
	if fake.NetworksStub != nil {
		return fake.NetworksStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.networksReturns.result1, fake.networksReturns.result2
}

func (fake *BoshFormService) NetworksCallCount() int {
	fake.networksMutex.RLock()
	defer fake.networksMutex.RUnlock()
	return len(fake.networksArgsForCall)
}

func (fake *BoshFormService) NetworksReturns(result1 map[string]string, result2 error) {
	fake.NetworksStub = nil
	fake.networksReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *BoshFormService) NetworksReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.NetworksStub = nil
	if fake.networksReturnsOnCall == nil {
		fake.networksReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.networksReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *BoshFormService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFormMutex.RLock()
	defer fake.getFormMutex.RUnlock()
	fake.postFormMutex.RLock()
	defer fake.postFormMutex.RUnlock()
	fake.availabilityZonesMutex.RLock()
	defer fake.availabilityZonesMutex.RUnlock()
	fake.networksMutex.RLock()
	defer fake.networksMutex.RUnlock()
	return fake.invocations
}

func (fake *BoshFormService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
