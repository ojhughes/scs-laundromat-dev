// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type CertificateAuthorityActivator struct {
	ActivateStub        func(api.ActivateCertificateAuthorityInput) error
	activateMutex       sync.RWMutex
	activateArgsForCall []struct {
		arg1 api.ActivateCertificateAuthorityInput
	}
	activateReturns struct {
		result1 error
	}
	activateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CertificateAuthorityActivator) Activate(arg1 api.ActivateCertificateAuthorityInput) error {
	fake.activateMutex.Lock()
	ret, specificReturn := fake.activateReturnsOnCall[len(fake.activateArgsForCall)]
	fake.activateArgsForCall = append(fake.activateArgsForCall, struct {
		arg1 api.ActivateCertificateAuthorityInput
	}{arg1})
	fake.recordInvocation("Activate", []interface{}{arg1})
	fake.activateMutex.Unlock()
	if fake.ActivateStub != nil {
		return fake.ActivateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.activateReturns.result1
}

func (fake *CertificateAuthorityActivator) ActivateCallCount() int {
	fake.activateMutex.RLock()
	defer fake.activateMutex.RUnlock()
	return len(fake.activateArgsForCall)
}

func (fake *CertificateAuthorityActivator) ActivateArgsForCall(i int) api.ActivateCertificateAuthorityInput {
	fake.activateMutex.RLock()
	defer fake.activateMutex.RUnlock()
	return fake.activateArgsForCall[i].arg1
}

func (fake *CertificateAuthorityActivator) ActivateReturns(result1 error) {
	fake.ActivateStub = nil
	fake.activateReturns = struct {
		result1 error
	}{result1}
}

func (fake *CertificateAuthorityActivator) ActivateReturnsOnCall(i int, result1 error) {
	fake.ActivateStub = nil
	if fake.activateReturnsOnCall == nil {
		fake.activateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.activateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CertificateAuthorityActivator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.activateMutex.RLock()
	defer fake.activateMutex.RUnlock()
	return fake.invocations
}

func (fake *CertificateAuthorityActivator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
