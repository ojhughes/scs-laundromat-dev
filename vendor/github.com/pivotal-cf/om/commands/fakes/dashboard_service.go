// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type DashboardService struct {
	GetInstallFormStub        func() (api.Form, error)
	getInstallFormMutex       sync.RWMutex
	getInstallFormArgsForCall []struct{}
	getInstallFormReturns     struct {
		result1 api.Form
		result2 error
	}
	getInstallFormReturnsOnCall map[int]struct {
		result1 api.Form
		result2 error
	}
	GetRevertFormStub        func() (api.Form, error)
	getRevertFormMutex       sync.RWMutex
	getRevertFormArgsForCall []struct{}
	getRevertFormReturns     struct {
		result1 api.Form
		result2 error
	}
	getRevertFormReturnsOnCall map[int]struct {
		result1 api.Form
		result2 error
	}
	PostInstallFormStub        func(api.PostFormInput) error
	postInstallFormMutex       sync.RWMutex
	postInstallFormArgsForCall []struct {
		arg1 api.PostFormInput
	}
	postInstallFormReturns struct {
		result1 error
	}
	postInstallFormReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DashboardService) GetInstallForm() (api.Form, error) {
	fake.getInstallFormMutex.Lock()
	ret, specificReturn := fake.getInstallFormReturnsOnCall[len(fake.getInstallFormArgsForCall)]
	fake.getInstallFormArgsForCall = append(fake.getInstallFormArgsForCall, struct{}{})
	fake.recordInvocation("GetInstallForm", []interface{}{})
	fake.getInstallFormMutex.Unlock()
	if fake.GetInstallFormStub != nil {
		return fake.GetInstallFormStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getInstallFormReturns.result1, fake.getInstallFormReturns.result2
}

func (fake *DashboardService) GetInstallFormCallCount() int {
	fake.getInstallFormMutex.RLock()
	defer fake.getInstallFormMutex.RUnlock()
	return len(fake.getInstallFormArgsForCall)
}

func (fake *DashboardService) GetInstallFormReturns(result1 api.Form, result2 error) {
	fake.GetInstallFormStub = nil
	fake.getInstallFormReturns = struct {
		result1 api.Form
		result2 error
	}{result1, result2}
}

func (fake *DashboardService) GetInstallFormReturnsOnCall(i int, result1 api.Form, result2 error) {
	fake.GetInstallFormStub = nil
	if fake.getInstallFormReturnsOnCall == nil {
		fake.getInstallFormReturnsOnCall = make(map[int]struct {
			result1 api.Form
			result2 error
		})
	}
	fake.getInstallFormReturnsOnCall[i] = struct {
		result1 api.Form
		result2 error
	}{result1, result2}
}

func (fake *DashboardService) GetRevertForm() (api.Form, error) {
	fake.getRevertFormMutex.Lock()
	ret, specificReturn := fake.getRevertFormReturnsOnCall[len(fake.getRevertFormArgsForCall)]
	fake.getRevertFormArgsForCall = append(fake.getRevertFormArgsForCall, struct{}{})
	fake.recordInvocation("GetRevertForm", []interface{}{})
	fake.getRevertFormMutex.Unlock()
	if fake.GetRevertFormStub != nil {
		return fake.GetRevertFormStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getRevertFormReturns.result1, fake.getRevertFormReturns.result2
}

func (fake *DashboardService) GetRevertFormCallCount() int {
	fake.getRevertFormMutex.RLock()
	defer fake.getRevertFormMutex.RUnlock()
	return len(fake.getRevertFormArgsForCall)
}

func (fake *DashboardService) GetRevertFormReturns(result1 api.Form, result2 error) {
	fake.GetRevertFormStub = nil
	fake.getRevertFormReturns = struct {
		result1 api.Form
		result2 error
	}{result1, result2}
}

func (fake *DashboardService) GetRevertFormReturnsOnCall(i int, result1 api.Form, result2 error) {
	fake.GetRevertFormStub = nil
	if fake.getRevertFormReturnsOnCall == nil {
		fake.getRevertFormReturnsOnCall = make(map[int]struct {
			result1 api.Form
			result2 error
		})
	}
	fake.getRevertFormReturnsOnCall[i] = struct {
		result1 api.Form
		result2 error
	}{result1, result2}
}

func (fake *DashboardService) PostInstallForm(arg1 api.PostFormInput) error {
	fake.postInstallFormMutex.Lock()
	ret, specificReturn := fake.postInstallFormReturnsOnCall[len(fake.postInstallFormArgsForCall)]
	fake.postInstallFormArgsForCall = append(fake.postInstallFormArgsForCall, struct {
		arg1 api.PostFormInput
	}{arg1})
	fake.recordInvocation("PostInstallForm", []interface{}{arg1})
	fake.postInstallFormMutex.Unlock()
	if fake.PostInstallFormStub != nil {
		return fake.PostInstallFormStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.postInstallFormReturns.result1
}

func (fake *DashboardService) PostInstallFormCallCount() int {
	fake.postInstallFormMutex.RLock()
	defer fake.postInstallFormMutex.RUnlock()
	return len(fake.postInstallFormArgsForCall)
}

func (fake *DashboardService) PostInstallFormArgsForCall(i int) api.PostFormInput {
	fake.postInstallFormMutex.RLock()
	defer fake.postInstallFormMutex.RUnlock()
	return fake.postInstallFormArgsForCall[i].arg1
}

func (fake *DashboardService) PostInstallFormReturns(result1 error) {
	fake.PostInstallFormStub = nil
	fake.postInstallFormReturns = struct {
		result1 error
	}{result1}
}

func (fake *DashboardService) PostInstallFormReturnsOnCall(i int, result1 error) {
	fake.PostInstallFormStub = nil
	if fake.postInstallFormReturnsOnCall == nil {
		fake.postInstallFormReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.postInstallFormReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DashboardService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getInstallFormMutex.RLock()
	defer fake.getInstallFormMutex.RUnlock()
	fake.getRevertFormMutex.RLock()
	defer fake.getRevertFormMutex.RUnlock()
	fake.postInstallFormMutex.RLock()
	defer fake.postInstallFormMutex.RUnlock()
	return fake.invocations
}

func (fake *DashboardService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
