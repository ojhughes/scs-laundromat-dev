// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type CredentialsService struct {
	FetchStub        func(deployedProductGUID, credentialReference string) (api.CredentialOutput, error)
	fetchMutex       sync.RWMutex
	fetchArgsForCall []struct {
		deployedProductGUID string
		credentialReference string
	}
	fetchReturns struct {
		result1 api.CredentialOutput
		result2 error
	}
	fetchReturnsOnCall map[int]struct {
		result1 api.CredentialOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CredentialsService) Fetch(deployedProductGUID string, credentialReference string) (api.CredentialOutput, error) {
	fake.fetchMutex.Lock()
	ret, specificReturn := fake.fetchReturnsOnCall[len(fake.fetchArgsForCall)]
	fake.fetchArgsForCall = append(fake.fetchArgsForCall, struct {
		deployedProductGUID string
		credentialReference string
	}{deployedProductGUID, credentialReference})
	fake.recordInvocation("Fetch", []interface{}{deployedProductGUID, credentialReference})
	fake.fetchMutex.Unlock()
	if fake.FetchStub != nil {
		return fake.FetchStub(deployedProductGUID, credentialReference)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fetchReturns.result1, fake.fetchReturns.result2
}

func (fake *CredentialsService) FetchCallCount() int {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return len(fake.fetchArgsForCall)
}

func (fake *CredentialsService) FetchArgsForCall(i int) (string, string) {
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.fetchArgsForCall[i].deployedProductGUID, fake.fetchArgsForCall[i].credentialReference
}

func (fake *CredentialsService) FetchReturns(result1 api.CredentialOutput, result2 error) {
	fake.FetchStub = nil
	fake.fetchReturns = struct {
		result1 api.CredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *CredentialsService) FetchReturnsOnCall(i int, result1 api.CredentialOutput, result2 error) {
	fake.FetchStub = nil
	if fake.fetchReturnsOnCall == nil {
		fake.fetchReturnsOnCall = make(map[int]struct {
			result1 api.CredentialOutput
			result2 error
		})
	}
	fake.fetchReturnsOnCall[i] = struct {
		result1 api.CredentialOutput
		result2 error
	}{result1, result2}
}

func (fake *CredentialsService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fetchMutex.RLock()
	defer fake.fetchMutex.RUnlock()
	return fake.invocations
}

func (fake *CredentialsService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
