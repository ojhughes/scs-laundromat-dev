// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type CertificateAuthorityCreator struct {
	CreateStub        func(api.CertificateAuthorityInput) (api.CA, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 api.CertificateAuthorityInput
	}
	createReturns struct {
		result1 api.CA
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 api.CA
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CertificateAuthorityCreator) Create(arg1 api.CertificateAuthorityInput) (api.CA, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 api.CertificateAuthorityInput
	}{arg1})
	fake.recordInvocation("Create", []interface{}{arg1})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReturns.result1, fake.createReturns.result2
}

func (fake *CertificateAuthorityCreator) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *CertificateAuthorityCreator) CreateArgsForCall(i int) api.CertificateAuthorityInput {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1
}

func (fake *CertificateAuthorityCreator) CreateReturns(result1 api.CA, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 api.CA
		result2 error
	}{result1, result2}
}

func (fake *CertificateAuthorityCreator) CreateReturnsOnCall(i int, result1 api.CA, result2 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 api.CA
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 api.CA
		result2 error
	}{result1, result2}
}

func (fake *CertificateAuthorityCreator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.invocations
}

func (fake *CertificateAuthorityCreator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
