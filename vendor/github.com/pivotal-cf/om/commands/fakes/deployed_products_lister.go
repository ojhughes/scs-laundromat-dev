// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf/om/api"
)

type DeployedProductsLister struct {
	DeployedProductsStub        func() ([]api.DeployedProductOutput, error)
	deployedProductsMutex       sync.RWMutex
	deployedProductsArgsForCall []struct{}
	deployedProductsReturns     struct {
		result1 []api.DeployedProductOutput
		result2 error
	}
	deployedProductsReturnsOnCall map[int]struct {
		result1 []api.DeployedProductOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DeployedProductsLister) DeployedProducts() ([]api.DeployedProductOutput, error) {
	fake.deployedProductsMutex.Lock()
	ret, specificReturn := fake.deployedProductsReturnsOnCall[len(fake.deployedProductsArgsForCall)]
	fake.deployedProductsArgsForCall = append(fake.deployedProductsArgsForCall, struct{}{})
	fake.recordInvocation("DeployedProducts", []interface{}{})
	fake.deployedProductsMutex.Unlock()
	if fake.DeployedProductsStub != nil {
		return fake.DeployedProductsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deployedProductsReturns.result1, fake.deployedProductsReturns.result2
}

func (fake *DeployedProductsLister) DeployedProductsCallCount() int {
	fake.deployedProductsMutex.RLock()
	defer fake.deployedProductsMutex.RUnlock()
	return len(fake.deployedProductsArgsForCall)
}

func (fake *DeployedProductsLister) DeployedProductsReturns(result1 []api.DeployedProductOutput, result2 error) {
	fake.DeployedProductsStub = nil
	fake.deployedProductsReturns = struct {
		result1 []api.DeployedProductOutput
		result2 error
	}{result1, result2}
}

func (fake *DeployedProductsLister) DeployedProductsReturnsOnCall(i int, result1 []api.DeployedProductOutput, result2 error) {
	fake.DeployedProductsStub = nil
	if fake.deployedProductsReturnsOnCall == nil {
		fake.deployedProductsReturnsOnCall = make(map[int]struct {
			result1 []api.DeployedProductOutput
			result2 error
		})
	}
	fake.deployedProductsReturnsOnCall[i] = struct {
		result1 []api.DeployedProductOutput
		result2 error
	}{result1, result2}
}

func (fake *DeployedProductsLister) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deployedProductsMutex.RLock()
	defer fake.deployedProductsMutex.RUnlock()
	return fake.invocations
}

func (fake *DeployedProductsLister) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
